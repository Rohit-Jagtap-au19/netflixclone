{"ast":null,"code":"var _jsxFileName = \"/home/rohit/Desktop/netflixclone/client/src/components/list/List.jsx\",\n    _s = $RefreshSig$();\n\nimport \"./list.scss\";\nimport { ArrowBackIosOutlined, ArrowForwardIosOutlined } from \"@material-ui/icons\";\nimport Listitem from \"../listitem/Listitem\";\nimport { useRef, useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function List(_ref) {\n  _s();\n\n  let {\n    list\n  } = _ref;\n  const [isMoved, setIsMoved] = useState(false);\n  const [slideNumber, setSlideNumber] = useState(0);\n  const listRef = useRef();\n\n  const handelClick = direction => {\n    setIsMoved(true);\n    let distance = listRef.current.getBoundingClientRect().x - 50;\n\n    if (direction === \"left\" && slideNumber > 0) {\n      setSlideNumber(slideNumber - 1);\n      listRef.current.style.transform = `translateX(${230 + distance}px)`;\n    }\n\n    if (direction === \"right\" && slideNumber < 2) {\n      /* how many rows u want to scroll ex.2*/\n      setSlideNumber(slideNumber + 1);\n      listRef.current.style.transform = `translateX(${-230 + distance}px)`;\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"list\",\n    children: [/*#__PURE__*/_jsxDEV(\"span\", {\n      className: \"listTitle\",\n      children: list.title\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"wrapper\",\n      children: [/*#__PURE__*/_jsxDEV(ArrowBackIosOutlined, {\n        className: \"sliderArrow left\",\n        onClick: () => handelClick(\"left\"),\n        style: {\n          display: !isMoved && \"none\"\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"container\",\n        ref: listRef,\n        children: list.content.map((item, i) => /*#__PURE__*/_jsxDEV(Listitem, {\n          index: i,\n          item: item\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 34,\n          columnNumber: 25\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 32,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(ArrowForwardIosOutlined, {\n        className: \"sliderArrow right\",\n        onClick: () => handelClick(\"right\")\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 28,\n    columnNumber: 9\n  }, this);\n}\n\n_s(List, \"Iv9XOTedsWAPfmI4OhMVBoYJvBs=\");\n\n_c = List;\n\nvar _c;\n\n$RefreshReg$(_c, \"List\");","map":{"version":3,"sources":["/home/rohit/Desktop/netflixclone/client/src/components/list/List.jsx"],"names":["ArrowBackIosOutlined","ArrowForwardIosOutlined","Listitem","useRef","useState","List","list","isMoved","setIsMoved","slideNumber","setSlideNumber","listRef","handelClick","direction","distance","current","getBoundingClientRect","x","style","transform","title","display","content","map","item","i"],"mappings":";;;AAAA,OAAO,aAAP;AACA,SAASA,oBAAT,EAA+BC,uBAA/B,QAA8D,oBAA9D;AACA,OAAOC,QAAP,MAAqB,sBAArB;AACA,SAASC,MAAT,EAAiBC,QAAjB,QAAiC,OAAjC;;AAIA,eAAe,SAASC,IAAT,OAAwB;AAAA;;AAAA,MAAV;AAAEC,IAAAA;AAAF,GAAU;AACnC,QAAM,CAACC,OAAD,EAAUC,UAAV,IAAwBJ,QAAQ,CAAC,KAAD,CAAtC;AACA,QAAM,CAACK,WAAD,EAAcC,cAAd,IAAgCN,QAAQ,CAAC,CAAD,CAA9C;AAEA,QAAMO,OAAO,GAAGR,MAAM,EAAtB;;AAEA,QAAMS,WAAW,GAAIC,SAAD,IAAe;AAC/BL,IAAAA,UAAU,CAAE,IAAF,CAAV;AACA,QAAIM,QAAQ,GAAGH,OAAO,CAACI,OAAR,CAAgBC,qBAAhB,GAAwCC,CAAxC,GAA4C,EAA3D;;AACA,QAAIJ,SAAS,KAAK,MAAd,IAAwBJ,WAAW,GAAG,CAA1C,EAA6C;AACzCC,MAAAA,cAAc,CAACD,WAAW,GAAG,CAAf,CAAd;AACAE,MAAAA,OAAO,CAACI,OAAR,CAAgBG,KAAhB,CAAsBC,SAAtB,GAAmC,cAAa,MAAML,QAAS,KAA/D;AACH;;AACD,QAAID,SAAS,KAAK,OAAd,IAAyBJ,WAAW,GAAG,CAA3C,EAA8C;AAAE;AAC5CC,MAAAA,cAAc,CAACD,WAAW,GAAG,CAAf,CAAd;AACAE,MAAAA,OAAO,CAACI,OAAR,CAAgBG,KAAhB,CAAsBC,SAAtB,GAAmC,cAAa,CAAC,GAAD,GAAOL,QAAS,KAAhE;AACH;AAEJ,GAZD;;AAaA,sBACI;AAAK,IAAA,SAAS,EAAC,MAAf;AAAA,4BACI;AAAM,MAAA,SAAS,EAAC,WAAhB;AAAA,gBAA6BR,IAAI,CAACc;AAAlC;AAAA;AAAA;AAAA;AAAA,YADJ,eAEI;AAAK,MAAA,SAAS,EAAC,SAAf;AAAA,8BACI,QAAC,oBAAD;AAAsB,QAAA,SAAS,EAAC,kBAAhC;AAAmD,QAAA,OAAO,EAAE,MAAMR,WAAW,CAAC,MAAD,CAA7E;AAAuF,QAAA,KAAK,EAAE;AAAES,UAAAA,OAAO,EAAE,CAACd,OAAD,IAAY;AAAvB;AAA9F;AAAA;AAAA;AAAA;AAAA,cADJ,eAEI;AAAK,QAAA,SAAS,EAAC,WAAf;AAA2B,QAAA,GAAG,EAAEI,OAAhC;AAAA,kBACKL,IAAI,CAACgB,OAAL,CAAaC,GAAb,CAAiB,CAACC,IAAD,EAAMC,CAAN,kBACd,QAAC,QAAD;AAAU,UAAA,KAAK,EAAEA,CAAjB;AAAoB,UAAA,IAAI,EAAED;AAA1B;AAAA;AAAA;AAAA;AAAA,gBADH;AADL;AAAA;AAAA;AAAA;AAAA,cAFJ,eAOI,QAAC,uBAAD;AAAyB,QAAA,SAAS,EAAC,mBAAnC;AAAuD,QAAA,OAAO,EAAE,MAAMZ,WAAW,CAAC,OAAD;AAAjF;AAAA;AAAA;AAAA;AAAA,cAPJ;AAAA;AAAA;AAAA;AAAA;AAAA,YAFJ;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAcH;;GAjCuBP,I;;KAAAA,I","sourcesContent":["import \"./list.scss\"\nimport { ArrowBackIosOutlined, ArrowForwardIosOutlined } from \"@material-ui/icons\"\nimport Listitem from \"../listitem/Listitem\"\nimport { useRef, useState } from \"react\"\n\n\n\nexport default function List({ list }) {\n    const [isMoved, setIsMoved] = useState(false)\n    const [slideNumber, setSlideNumber] = useState(0)\n\n    const listRef = useRef()\n\n    const handelClick = (direction) => {\n        setIsMoved((true))\n        let distance = listRef.current.getBoundingClientRect().x - 50\n        if (direction === \"left\" && slideNumber > 0) {\n            setSlideNumber(slideNumber - 1)\n            listRef.current.style.transform = `translateX(${230 + distance}px)`\n        }\n        if (direction === \"right\" && slideNumber < 2) { /* how many rows u want to scroll ex.2*/\n            setSlideNumber(slideNumber + 1)\n            listRef.current.style.transform = `translateX(${-230 + distance}px)`\n        }\n\n    }\n    return (\n        <div className=\"list\">\n            <span className=\"listTitle\">{list.title}</span>\n            <div className=\"wrapper\">\n                <ArrowBackIosOutlined className=\"sliderArrow left\" onClick={() => handelClick(\"left\")} style={{ display: !isMoved && \"none\" }} />\n                <div className=\"container\" ref={listRef}>\n                    {list.content.map((item,i) => (\n                        <Listitem index={i} item={item} />\n                        ))}\n                </div>\n                <ArrowForwardIosOutlined className=\"sliderArrow right\" onClick={() => handelClick(\"right\")} />\n            </div>\n        </div>\n    )\n}\n"]},"metadata":{},"sourceType":"module"}